// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto;
namespace SceneExport {
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Renderer;
struct RendererDefaultTypeInternal;
extern RendererDefaultTypeInternal _Renderer_default_instance_;
class Scene;
struct SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace SceneExport
PROTOBUF_NAMESPACE_OPEN
template<> ::SceneExport::Mesh* Arena::CreateMaybeMessage<::SceneExport::Mesh>(Arena*);
template<> ::SceneExport::Quaternion* Arena::CreateMaybeMessage<::SceneExport::Quaternion>(Arena*);
template<> ::SceneExport::Renderer* Arena::CreateMaybeMessage<::SceneExport::Renderer>(Arena*);
template<> ::SceneExport::Scene* Arena::CreateMaybeMessage<::SceneExport::Scene>(Arena*);
template<> ::SceneExport::Transform* Arena::CreateMaybeMessage<::SceneExport::Transform>(Arena*);
template<> ::SceneExport::Vector2* Arena::CreateMaybeMessage<::SceneExport::Vector2>(Arena*);
template<> ::SceneExport::Vector3* Arena::CreateMaybeMessage<::SceneExport::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace SceneExport {

// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector3& from) {
    Vector3::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:SceneExport.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit PROTOBUF_CONSTEXPR Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector2& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector2& from) {
    Vector2::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:SceneExport.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Quaternion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  explicit PROTOBUF_CONSTEXPR Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // optional float w = 4;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:SceneExport.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    float x_;
    float y_;
    float z_;
    float w_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit PROTOBUF_CONSTEXPR Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Transform& from) {
    Transform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumn0FieldNumber = 1,
    kColumn1FieldNumber = 2,
    kColumn2FieldNumber = 3,
    kColumn3FieldNumber = 4,
  };
  // optional .SceneExport.Vector3 column0 = 1;
  bool has_column0() const;
  private:
  bool _internal_has_column0() const;
  public:
  void clear_column0();
  const ::SceneExport::Vector3& column0() const;
  PROTOBUF_NODISCARD ::SceneExport::Vector3* release_column0();
  ::SceneExport::Vector3* mutable_column0();
  void set_allocated_column0(::SceneExport::Vector3* column0);
  private:
  const ::SceneExport::Vector3& _internal_column0() const;
  ::SceneExport::Vector3* _internal_mutable_column0();
  public:
  void unsafe_arena_set_allocated_column0(
      ::SceneExport::Vector3* column0);
  ::SceneExport::Vector3* unsafe_arena_release_column0();

  // optional .SceneExport.Vector3 column1 = 2;
  bool has_column1() const;
  private:
  bool _internal_has_column1() const;
  public:
  void clear_column1();
  const ::SceneExport::Vector3& column1() const;
  PROTOBUF_NODISCARD ::SceneExport::Vector3* release_column1();
  ::SceneExport::Vector3* mutable_column1();
  void set_allocated_column1(::SceneExport::Vector3* column1);
  private:
  const ::SceneExport::Vector3& _internal_column1() const;
  ::SceneExport::Vector3* _internal_mutable_column1();
  public:
  void unsafe_arena_set_allocated_column1(
      ::SceneExport::Vector3* column1);
  ::SceneExport::Vector3* unsafe_arena_release_column1();

  // optional .SceneExport.Vector3 column2 = 3;
  bool has_column2() const;
  private:
  bool _internal_has_column2() const;
  public:
  void clear_column2();
  const ::SceneExport::Vector3& column2() const;
  PROTOBUF_NODISCARD ::SceneExport::Vector3* release_column2();
  ::SceneExport::Vector3* mutable_column2();
  void set_allocated_column2(::SceneExport::Vector3* column2);
  private:
  const ::SceneExport::Vector3& _internal_column2() const;
  ::SceneExport::Vector3* _internal_mutable_column2();
  public:
  void unsafe_arena_set_allocated_column2(
      ::SceneExport::Vector3* column2);
  ::SceneExport::Vector3* unsafe_arena_release_column2();

  // optional .SceneExport.Vector3 column3 = 4;
  bool has_column3() const;
  private:
  bool _internal_has_column3() const;
  public:
  void clear_column3();
  const ::SceneExport::Vector3& column3() const;
  PROTOBUF_NODISCARD ::SceneExport::Vector3* release_column3();
  ::SceneExport::Vector3* mutable_column3();
  void set_allocated_column3(::SceneExport::Vector3* column3);
  private:
  const ::SceneExport::Vector3& _internal_column3() const;
  ::SceneExport::Vector3* _internal_mutable_column3();
  public:
  void unsafe_arena_set_allocated_column3(
      ::SceneExport::Vector3* column3);
  ::SceneExport::Vector3* unsafe_arena_release_column3();

  // @@protoc_insertion_point(class_scope:SceneExport.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SceneExport::Vector3* column0_;
    ::SceneExport::Vector3* column1_;
    ::SceneExport::Vector3* column2_;
    ::SceneExport::Vector3* column3_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Mesh final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() override;
  explicit PROTOBUF_CONSTEXPR Mesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Mesh(const Mesh& from);
  Mesh(Mesh&& from) noexcept
    : Mesh() {
    *this = ::std::move(from);
  }

  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
               &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Mesh& a, Mesh& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Mesh>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Mesh& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Mesh& from) {
    Mesh::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Mesh";
  }
  protected:
  explicit Mesh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kTangentsFieldNumber = 3,
    kUvFieldNumber = 4,
    kTrianglesFieldNumber = 5,
  };
  // repeated .SceneExport.Vector3 vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::SceneExport::Vector3* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
      mutable_vertices();
  private:
  const ::SceneExport::Vector3& _internal_vertices(int index) const;
  ::SceneExport::Vector3* _internal_add_vertices();
  public:
  const ::SceneExport::Vector3& vertices(int index) const;
  ::SceneExport::Vector3* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
      vertices() const;

  // repeated .SceneExport.Vector3 normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::SceneExport::Vector3* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
      mutable_normals();
  private:
  const ::SceneExport::Vector3& _internal_normals(int index) const;
  ::SceneExport::Vector3* _internal_add_normals();
  public:
  const ::SceneExport::Vector3& normals(int index) const;
  ::SceneExport::Vector3* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
      normals() const;

  // repeated .SceneExport.Vector3 tangents = 3;
  int tangents_size() const;
  private:
  int _internal_tangents_size() const;
  public:
  void clear_tangents();
  ::SceneExport::Vector3* mutable_tangents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
      mutable_tangents();
  private:
  const ::SceneExport::Vector3& _internal_tangents(int index) const;
  ::SceneExport::Vector3* _internal_add_tangents();
  public:
  const ::SceneExport::Vector3& tangents(int index) const;
  ::SceneExport::Vector3* add_tangents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
      tangents() const;

  // repeated .SceneExport.Vector2 uv = 4;
  int uv_size() const;
  private:
  int _internal_uv_size() const;
  public:
  void clear_uv();
  ::SceneExport::Vector2* mutable_uv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector2 >*
      mutable_uv();
  private:
  const ::SceneExport::Vector2& _internal_uv(int index) const;
  ::SceneExport::Vector2* _internal_add_uv();
  public:
  const ::SceneExport::Vector2& uv(int index) const;
  ::SceneExport::Vector2* add_uv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector2 >&
      uv() const;

  // repeated int32 triangles = 5;
  int triangles_size() const;
  private:
  int _internal_triangles_size() const;
  public:
  void clear_triangles();
  private:
  int32_t _internal_triangles(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_triangles() const;
  void _internal_add_triangles(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_triangles();
  public:
  int32_t triangles(int index) const;
  void set_triangles(int index, int32_t value);
  void add_triangles(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      triangles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_triangles();

  // @@protoc_insertion_point(class_scope:SceneExport.Mesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 > vertices_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 > normals_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 > tangents_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector2 > uv_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > triangles_;
    mutable std::atomic<int> _triangles_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Renderer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Renderer) */ {
 public:
  inline Renderer() : Renderer(nullptr) {}
  ~Renderer() override;
  explicit PROTOBUF_CONSTEXPR Renderer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Renderer(const Renderer& from);
  Renderer(Renderer&& from) noexcept
    : Renderer() {
    *this = ::std::move(from);
  }

  inline Renderer& operator=(const Renderer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Renderer& operator=(Renderer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Renderer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Renderer* internal_default_instance() {
    return reinterpret_cast<const Renderer*>(
               &_Renderer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Renderer& a, Renderer& b) {
    a.Swap(&b);
  }
  inline void Swap(Renderer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Renderer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Renderer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Renderer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Renderer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Renderer& from) {
    Renderer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Renderer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Renderer";
  }
  protected:
  explicit Renderer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 2,
    kMeshIdFieldNumber = 1,
  };
  // optional .SceneExport.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::SceneExport::Transform& transform() const;
  PROTOBUF_NODISCARD ::SceneExport::Transform* release_transform();
  ::SceneExport::Transform* mutable_transform();
  void set_allocated_transform(::SceneExport::Transform* transform);
  private:
  const ::SceneExport::Transform& _internal_transform() const;
  ::SceneExport::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::SceneExport::Transform* transform);
  ::SceneExport::Transform* unsafe_arena_release_transform();

  // optional int32 meshId = 1;
  bool has_meshid() const;
  private:
  bool _internal_has_meshid() const;
  public:
  void clear_meshid();
  int32_t meshid() const;
  void set_meshid(int32_t value);
  private:
  int32_t _internal_meshid() const;
  void _internal_set_meshid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:SceneExport.Renderer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::SceneExport::Transform* transform_;
    int32_t meshid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// -------------------------------------------------------------------

class Scene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SceneExport.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  ~Scene() override;
  explicit PROTOBUF_CONSTEXPR Scene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Scene& default_instance() {
    return *internal_default_instance();
  }
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Scene& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Scene& from) {
    Scene::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SceneExport.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeshesFieldNumber = 1,
    kRenderersFieldNumber = 2,
  };
  // repeated .SceneExport.Mesh meshes = 1;
  int meshes_size() const;
  private:
  int _internal_meshes_size() const;
  public:
  void clear_meshes();
  ::SceneExport::Mesh* mutable_meshes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Mesh >*
      mutable_meshes();
  private:
  const ::SceneExport::Mesh& _internal_meshes(int index) const;
  ::SceneExport::Mesh* _internal_add_meshes();
  public:
  const ::SceneExport::Mesh& meshes(int index) const;
  ::SceneExport::Mesh* add_meshes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Mesh >&
      meshes() const;

  // repeated .SceneExport.Renderer renderers = 2;
  int renderers_size() const;
  private:
  int _internal_renderers_size() const;
  public:
  void clear_renderers();
  ::SceneExport::Renderer* mutable_renderers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Renderer >*
      mutable_renderers();
  private:
  const ::SceneExport::Renderer& _internal_renderers(int index) const;
  ::SceneExport::Renderer* _internal_add_renderers();
  public:
  const ::SceneExport::Renderer& renderers(int index) const;
  ::SceneExport::Renderer* add_renderers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Renderer >&
      renderers() const;

  // @@protoc_insertion_point(class_scope:SceneExport.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Mesh > meshes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Renderer > renderers_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_scene_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// optional float x = 1;
inline bool Vector3::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector3::has_x() const {
  return _internal_has_x();
}
inline void Vector3::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Vector3::_internal_x() const {
  return _impl_.x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:SceneExport.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SceneExport.Vector3.x)
}

// optional float y = 2;
inline bool Vector3::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector3::has_y() const {
  return _internal_has_y();
}
inline void Vector3::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Vector3::_internal_y() const {
  return _impl_.y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:SceneExport.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SceneExport.Vector3.y)
}

// optional float z = 3;
inline bool Vector3::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vector3::has_z() const {
  return _internal_has_z();
}
inline void Vector3::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Vector3::_internal_z() const {
  return _impl_.z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:SceneExport.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SceneExport.Vector3.z)
}

// -------------------------------------------------------------------

// Vector2

// optional float x = 1;
inline bool Vector2::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vector2::has_x() const {
  return _internal_has_x();
}
inline void Vector2::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Vector2::_internal_x() const {
  return _impl_.x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:SceneExport.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SceneExport.Vector2.x)
}

// optional float y = 2;
inline bool Vector2::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vector2::has_y() const {
  return _internal_has_y();
}
inline void Vector2::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Vector2::_internal_y() const {
  return _impl_.y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:SceneExport.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SceneExport.Vector2.y)
}

// -------------------------------------------------------------------

// Quaternion

// optional float x = 1;
inline bool Quaternion::_internal_has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Quaternion::has_x() const {
  return _internal_has_x();
}
inline void Quaternion::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Quaternion::_internal_x() const {
  return _impl_.x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:SceneExport.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:SceneExport.Quaternion.x)
}

// optional float y = 2;
inline bool Quaternion::_internal_has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Quaternion::has_y() const {
  return _internal_has_y();
}
inline void Quaternion::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Quaternion::_internal_y() const {
  return _impl_.y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:SceneExport.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:SceneExport.Quaternion.y)
}

// optional float z = 3;
inline bool Quaternion::_internal_has_z() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Quaternion::has_z() const {
  return _internal_has_z();
}
inline void Quaternion::clear_z() {
  _impl_.z_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Quaternion::_internal_z() const {
  return _impl_.z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:SceneExport.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:SceneExport.Quaternion.z)
}

// optional float w = 4;
inline bool Quaternion::_internal_has_w() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Quaternion::has_w() const {
  return _internal_has_w();
}
inline void Quaternion::clear_w() {
  _impl_.w_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Quaternion::_internal_w() const {
  return _impl_.w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:SceneExport.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:SceneExport.Quaternion.w)
}

// -------------------------------------------------------------------

// Transform

// optional .SceneExport.Vector3 column0 = 1;
inline bool Transform::_internal_has_column0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column0_ != nullptr);
  return value;
}
inline bool Transform::has_column0() const {
  return _internal_has_column0();
}
inline void Transform::clear_column0() {
  if (_impl_.column0_ != nullptr) _impl_.column0_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SceneExport::Vector3& Transform::_internal_column0() const {
  const ::SceneExport::Vector3* p = _impl_.column0_;
  return p != nullptr ? *p : reinterpret_cast<const ::SceneExport::Vector3&>(
      ::SceneExport::_Vector3_default_instance_);
}
inline const ::SceneExport::Vector3& Transform::column0() const {
  // @@protoc_insertion_point(field_get:SceneExport.Transform.column0)
  return _internal_column0();
}
inline void Transform::unsafe_arena_set_allocated_column0(
    ::SceneExport::Vector3* column0) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column0_);
  }
  _impl_.column0_ = column0;
  if (column0) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SceneExport.Transform.column0)
}
inline ::SceneExport::Vector3* Transform::release_column0() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SceneExport::Vector3* temp = _impl_.column0_;
  _impl_.column0_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SceneExport::Vector3* Transform::unsafe_arena_release_column0() {
  // @@protoc_insertion_point(field_release:SceneExport.Transform.column0)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SceneExport::Vector3* temp = _impl_.column0_;
  _impl_.column0_ = nullptr;
  return temp;
}
inline ::SceneExport::Vector3* Transform::_internal_mutable_column0() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.column0_ == nullptr) {
    auto* p = CreateMaybeMessage<::SceneExport::Vector3>(GetArenaForAllocation());
    _impl_.column0_ = p;
  }
  return _impl_.column0_;
}
inline ::SceneExport::Vector3* Transform::mutable_column0() {
  ::SceneExport::Vector3* _msg = _internal_mutable_column0();
  // @@protoc_insertion_point(field_mutable:SceneExport.Transform.column0)
  return _msg;
}
inline void Transform::set_allocated_column0(::SceneExport::Vector3* column0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.column0_;
  }
  if (column0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column0);
    if (message_arena != submessage_arena) {
      column0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column0, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.column0_ = column0;
  // @@protoc_insertion_point(field_set_allocated:SceneExport.Transform.column0)
}

// optional .SceneExport.Vector3 column1 = 2;
inline bool Transform::_internal_has_column1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column1_ != nullptr);
  return value;
}
inline bool Transform::has_column1() const {
  return _internal_has_column1();
}
inline void Transform::clear_column1() {
  if (_impl_.column1_ != nullptr) _impl_.column1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::SceneExport::Vector3& Transform::_internal_column1() const {
  const ::SceneExport::Vector3* p = _impl_.column1_;
  return p != nullptr ? *p : reinterpret_cast<const ::SceneExport::Vector3&>(
      ::SceneExport::_Vector3_default_instance_);
}
inline const ::SceneExport::Vector3& Transform::column1() const {
  // @@protoc_insertion_point(field_get:SceneExport.Transform.column1)
  return _internal_column1();
}
inline void Transform::unsafe_arena_set_allocated_column1(
    ::SceneExport::Vector3* column1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column1_);
  }
  _impl_.column1_ = column1;
  if (column1) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SceneExport.Transform.column1)
}
inline ::SceneExport::Vector3* Transform::release_column1() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SceneExport::Vector3* temp = _impl_.column1_;
  _impl_.column1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SceneExport::Vector3* Transform::unsafe_arena_release_column1() {
  // @@protoc_insertion_point(field_release:SceneExport.Transform.column1)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::SceneExport::Vector3* temp = _impl_.column1_;
  _impl_.column1_ = nullptr;
  return temp;
}
inline ::SceneExport::Vector3* Transform::_internal_mutable_column1() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.column1_ == nullptr) {
    auto* p = CreateMaybeMessage<::SceneExport::Vector3>(GetArenaForAllocation());
    _impl_.column1_ = p;
  }
  return _impl_.column1_;
}
inline ::SceneExport::Vector3* Transform::mutable_column1() {
  ::SceneExport::Vector3* _msg = _internal_mutable_column1();
  // @@protoc_insertion_point(field_mutable:SceneExport.Transform.column1)
  return _msg;
}
inline void Transform::set_allocated_column1(::SceneExport::Vector3* column1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.column1_;
  }
  if (column1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column1);
    if (message_arena != submessage_arena) {
      column1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.column1_ = column1;
  // @@protoc_insertion_point(field_set_allocated:SceneExport.Transform.column1)
}

// optional .SceneExport.Vector3 column2 = 3;
inline bool Transform::_internal_has_column2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column2_ != nullptr);
  return value;
}
inline bool Transform::has_column2() const {
  return _internal_has_column2();
}
inline void Transform::clear_column2() {
  if (_impl_.column2_ != nullptr) _impl_.column2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::SceneExport::Vector3& Transform::_internal_column2() const {
  const ::SceneExport::Vector3* p = _impl_.column2_;
  return p != nullptr ? *p : reinterpret_cast<const ::SceneExport::Vector3&>(
      ::SceneExport::_Vector3_default_instance_);
}
inline const ::SceneExport::Vector3& Transform::column2() const {
  // @@protoc_insertion_point(field_get:SceneExport.Transform.column2)
  return _internal_column2();
}
inline void Transform::unsafe_arena_set_allocated_column2(
    ::SceneExport::Vector3* column2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column2_);
  }
  _impl_.column2_ = column2;
  if (column2) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SceneExport.Transform.column2)
}
inline ::SceneExport::Vector3* Transform::release_column2() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SceneExport::Vector3* temp = _impl_.column2_;
  _impl_.column2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SceneExport::Vector3* Transform::unsafe_arena_release_column2() {
  // @@protoc_insertion_point(field_release:SceneExport.Transform.column2)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::SceneExport::Vector3* temp = _impl_.column2_;
  _impl_.column2_ = nullptr;
  return temp;
}
inline ::SceneExport::Vector3* Transform::_internal_mutable_column2() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.column2_ == nullptr) {
    auto* p = CreateMaybeMessage<::SceneExport::Vector3>(GetArenaForAllocation());
    _impl_.column2_ = p;
  }
  return _impl_.column2_;
}
inline ::SceneExport::Vector3* Transform::mutable_column2() {
  ::SceneExport::Vector3* _msg = _internal_mutable_column2();
  // @@protoc_insertion_point(field_mutable:SceneExport.Transform.column2)
  return _msg;
}
inline void Transform::set_allocated_column2(::SceneExport::Vector3* column2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.column2_;
  }
  if (column2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column2);
    if (message_arena != submessage_arena) {
      column2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.column2_ = column2;
  // @@protoc_insertion_point(field_set_allocated:SceneExport.Transform.column2)
}

// optional .SceneExport.Vector3 column3 = 4;
inline bool Transform::_internal_has_column3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column3_ != nullptr);
  return value;
}
inline bool Transform::has_column3() const {
  return _internal_has_column3();
}
inline void Transform::clear_column3() {
  if (_impl_.column3_ != nullptr) _impl_.column3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::SceneExport::Vector3& Transform::_internal_column3() const {
  const ::SceneExport::Vector3* p = _impl_.column3_;
  return p != nullptr ? *p : reinterpret_cast<const ::SceneExport::Vector3&>(
      ::SceneExport::_Vector3_default_instance_);
}
inline const ::SceneExport::Vector3& Transform::column3() const {
  // @@protoc_insertion_point(field_get:SceneExport.Transform.column3)
  return _internal_column3();
}
inline void Transform::unsafe_arena_set_allocated_column3(
    ::SceneExport::Vector3* column3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column3_);
  }
  _impl_.column3_ = column3;
  if (column3) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SceneExport.Transform.column3)
}
inline ::SceneExport::Vector3* Transform::release_column3() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::SceneExport::Vector3* temp = _impl_.column3_;
  _impl_.column3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SceneExport::Vector3* Transform::unsafe_arena_release_column3() {
  // @@protoc_insertion_point(field_release:SceneExport.Transform.column3)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::SceneExport::Vector3* temp = _impl_.column3_;
  _impl_.column3_ = nullptr;
  return temp;
}
inline ::SceneExport::Vector3* Transform::_internal_mutable_column3() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.column3_ == nullptr) {
    auto* p = CreateMaybeMessage<::SceneExport::Vector3>(GetArenaForAllocation());
    _impl_.column3_ = p;
  }
  return _impl_.column3_;
}
inline ::SceneExport::Vector3* Transform::mutable_column3() {
  ::SceneExport::Vector3* _msg = _internal_mutable_column3();
  // @@protoc_insertion_point(field_mutable:SceneExport.Transform.column3)
  return _msg;
}
inline void Transform::set_allocated_column3(::SceneExport::Vector3* column3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.column3_;
  }
  if (column3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(column3);
    if (message_arena != submessage_arena) {
      column3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column3, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.column3_ = column3;
  // @@protoc_insertion_point(field_set_allocated:SceneExport.Transform.column3)
}

// -------------------------------------------------------------------

// Mesh

// repeated .SceneExport.Vector3 vertices = 1;
inline int Mesh::_internal_vertices_size() const {
  return _impl_.vertices_.size();
}
inline int Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh::clear_vertices() {
  _impl_.vertices_.Clear();
}
inline ::SceneExport::Vector3* Mesh::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Mesh.vertices)
  return _impl_.vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
Mesh::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Mesh.vertices)
  return &_impl_.vertices_;
}
inline const ::SceneExport::Vector3& Mesh::_internal_vertices(int index) const {
  return _impl_.vertices_.Get(index);
}
inline const ::SceneExport::Vector3& Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Mesh.vertices)
  return _internal_vertices(index);
}
inline ::SceneExport::Vector3* Mesh::_internal_add_vertices() {
  return _impl_.vertices_.Add();
}
inline ::SceneExport::Vector3* Mesh::add_vertices() {
  ::SceneExport::Vector3* _add = _internal_add_vertices();
  // @@protoc_insertion_point(field_add:SceneExport.Mesh.vertices)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
Mesh::vertices() const {
  // @@protoc_insertion_point(field_list:SceneExport.Mesh.vertices)
  return _impl_.vertices_;
}

// repeated .SceneExport.Vector3 normals = 2;
inline int Mesh::_internal_normals_size() const {
  return _impl_.normals_.size();
}
inline int Mesh::normals_size() const {
  return _internal_normals_size();
}
inline void Mesh::clear_normals() {
  _impl_.normals_.Clear();
}
inline ::SceneExport::Vector3* Mesh::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Mesh.normals)
  return _impl_.normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
Mesh::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Mesh.normals)
  return &_impl_.normals_;
}
inline const ::SceneExport::Vector3& Mesh::_internal_normals(int index) const {
  return _impl_.normals_.Get(index);
}
inline const ::SceneExport::Vector3& Mesh::normals(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Mesh.normals)
  return _internal_normals(index);
}
inline ::SceneExport::Vector3* Mesh::_internal_add_normals() {
  return _impl_.normals_.Add();
}
inline ::SceneExport::Vector3* Mesh::add_normals() {
  ::SceneExport::Vector3* _add = _internal_add_normals();
  // @@protoc_insertion_point(field_add:SceneExport.Mesh.normals)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
Mesh::normals() const {
  // @@protoc_insertion_point(field_list:SceneExport.Mesh.normals)
  return _impl_.normals_;
}

// repeated .SceneExport.Vector3 tangents = 3;
inline int Mesh::_internal_tangents_size() const {
  return _impl_.tangents_.size();
}
inline int Mesh::tangents_size() const {
  return _internal_tangents_size();
}
inline void Mesh::clear_tangents() {
  _impl_.tangents_.Clear();
}
inline ::SceneExport::Vector3* Mesh::mutable_tangents(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Mesh.tangents)
  return _impl_.tangents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >*
Mesh::mutable_tangents() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Mesh.tangents)
  return &_impl_.tangents_;
}
inline const ::SceneExport::Vector3& Mesh::_internal_tangents(int index) const {
  return _impl_.tangents_.Get(index);
}
inline const ::SceneExport::Vector3& Mesh::tangents(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Mesh.tangents)
  return _internal_tangents(index);
}
inline ::SceneExport::Vector3* Mesh::_internal_add_tangents() {
  return _impl_.tangents_.Add();
}
inline ::SceneExport::Vector3* Mesh::add_tangents() {
  ::SceneExport::Vector3* _add = _internal_add_tangents();
  // @@protoc_insertion_point(field_add:SceneExport.Mesh.tangents)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector3 >&
Mesh::tangents() const {
  // @@protoc_insertion_point(field_list:SceneExport.Mesh.tangents)
  return _impl_.tangents_;
}

// repeated .SceneExport.Vector2 uv = 4;
inline int Mesh::_internal_uv_size() const {
  return _impl_.uv_.size();
}
inline int Mesh::uv_size() const {
  return _internal_uv_size();
}
inline void Mesh::clear_uv() {
  _impl_.uv_.Clear();
}
inline ::SceneExport::Vector2* Mesh::mutable_uv(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Mesh.uv)
  return _impl_.uv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector2 >*
Mesh::mutable_uv() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Mesh.uv)
  return &_impl_.uv_;
}
inline const ::SceneExport::Vector2& Mesh::_internal_uv(int index) const {
  return _impl_.uv_.Get(index);
}
inline const ::SceneExport::Vector2& Mesh::uv(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Mesh.uv)
  return _internal_uv(index);
}
inline ::SceneExport::Vector2* Mesh::_internal_add_uv() {
  return _impl_.uv_.Add();
}
inline ::SceneExport::Vector2* Mesh::add_uv() {
  ::SceneExport::Vector2* _add = _internal_add_uv();
  // @@protoc_insertion_point(field_add:SceneExport.Mesh.uv)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Vector2 >&
Mesh::uv() const {
  // @@protoc_insertion_point(field_list:SceneExport.Mesh.uv)
  return _impl_.uv_;
}

// repeated int32 triangles = 5;
inline int Mesh::_internal_triangles_size() const {
  return _impl_.triangles_.size();
}
inline int Mesh::triangles_size() const {
  return _internal_triangles_size();
}
inline void Mesh::clear_triangles() {
  _impl_.triangles_.Clear();
}
inline int32_t Mesh::_internal_triangles(int index) const {
  return _impl_.triangles_.Get(index);
}
inline int32_t Mesh::triangles(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Mesh.triangles)
  return _internal_triangles(index);
}
inline void Mesh::set_triangles(int index, int32_t value) {
  _impl_.triangles_.Set(index, value);
  // @@protoc_insertion_point(field_set:SceneExport.Mesh.triangles)
}
inline void Mesh::_internal_add_triangles(int32_t value) {
  _impl_.triangles_.Add(value);
}
inline void Mesh::add_triangles(int32_t value) {
  _internal_add_triangles(value);
  // @@protoc_insertion_point(field_add:SceneExport.Mesh.triangles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh::_internal_triangles() const {
  return _impl_.triangles_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Mesh::triangles() const {
  // @@protoc_insertion_point(field_list:SceneExport.Mesh.triangles)
  return _internal_triangles();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh::_internal_mutable_triangles() {
  return &_impl_.triangles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Mesh::mutable_triangles() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Mesh.triangles)
  return _internal_mutable_triangles();
}

// -------------------------------------------------------------------

// Renderer

// optional int32 meshId = 1;
inline bool Renderer::_internal_has_meshid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Renderer::has_meshid() const {
  return _internal_has_meshid();
}
inline void Renderer::clear_meshid() {
  _impl_.meshid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t Renderer::_internal_meshid() const {
  return _impl_.meshid_;
}
inline int32_t Renderer::meshid() const {
  // @@protoc_insertion_point(field_get:SceneExport.Renderer.meshId)
  return _internal_meshid();
}
inline void Renderer::_internal_set_meshid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.meshid_ = value;
}
inline void Renderer::set_meshid(int32_t value) {
  _internal_set_meshid(value);
  // @@protoc_insertion_point(field_set:SceneExport.Renderer.meshId)
}

// optional .SceneExport.Transform transform = 2;
inline bool Renderer::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool Renderer::has_transform() const {
  return _internal_has_transform();
}
inline void Renderer::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::SceneExport::Transform& Renderer::_internal_transform() const {
  const ::SceneExport::Transform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::SceneExport::Transform&>(
      ::SceneExport::_Transform_default_instance_);
}
inline const ::SceneExport::Transform& Renderer::transform() const {
  // @@protoc_insertion_point(field_get:SceneExport.Renderer.transform)
  return _internal_transform();
}
inline void Renderer::unsafe_arena_set_allocated_transform(
    ::SceneExport::Transform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SceneExport.Renderer.transform)
}
inline ::SceneExport::Transform* Renderer::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SceneExport::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::SceneExport::Transform* Renderer::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:SceneExport.Renderer.transform)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::SceneExport::Transform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::SceneExport::Transform* Renderer::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::SceneExport::Transform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::SceneExport::Transform* Renderer::mutable_transform() {
  ::SceneExport::Transform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:SceneExport.Renderer.transform)
  return _msg;
}
inline void Renderer::set_allocated_transform(::SceneExport::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:SceneExport.Renderer.transform)
}

// -------------------------------------------------------------------

// Scene

// repeated .SceneExport.Mesh meshes = 1;
inline int Scene::_internal_meshes_size() const {
  return _impl_.meshes_.size();
}
inline int Scene::meshes_size() const {
  return _internal_meshes_size();
}
inline void Scene::clear_meshes() {
  _impl_.meshes_.Clear();
}
inline ::SceneExport::Mesh* Scene::mutable_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Scene.meshes)
  return _impl_.meshes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Mesh >*
Scene::mutable_meshes() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Scene.meshes)
  return &_impl_.meshes_;
}
inline const ::SceneExport::Mesh& Scene::_internal_meshes(int index) const {
  return _impl_.meshes_.Get(index);
}
inline const ::SceneExport::Mesh& Scene::meshes(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Scene.meshes)
  return _internal_meshes(index);
}
inline ::SceneExport::Mesh* Scene::_internal_add_meshes() {
  return _impl_.meshes_.Add();
}
inline ::SceneExport::Mesh* Scene::add_meshes() {
  ::SceneExport::Mesh* _add = _internal_add_meshes();
  // @@protoc_insertion_point(field_add:SceneExport.Scene.meshes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Mesh >&
Scene::meshes() const {
  // @@protoc_insertion_point(field_list:SceneExport.Scene.meshes)
  return _impl_.meshes_;
}

// repeated .SceneExport.Renderer renderers = 2;
inline int Scene::_internal_renderers_size() const {
  return _impl_.renderers_.size();
}
inline int Scene::renderers_size() const {
  return _internal_renderers_size();
}
inline void Scene::clear_renderers() {
  _impl_.renderers_.Clear();
}
inline ::SceneExport::Renderer* Scene::mutable_renderers(int index) {
  // @@protoc_insertion_point(field_mutable:SceneExport.Scene.renderers)
  return _impl_.renderers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Renderer >*
Scene::mutable_renderers() {
  // @@protoc_insertion_point(field_mutable_list:SceneExport.Scene.renderers)
  return &_impl_.renderers_;
}
inline const ::SceneExport::Renderer& Scene::_internal_renderers(int index) const {
  return _impl_.renderers_.Get(index);
}
inline const ::SceneExport::Renderer& Scene::renderers(int index) const {
  // @@protoc_insertion_point(field_get:SceneExport.Scene.renderers)
  return _internal_renderers(index);
}
inline ::SceneExport::Renderer* Scene::_internal_add_renderers() {
  return _impl_.renderers_.Add();
}
inline ::SceneExport::Renderer* Scene::add_renderers() {
  ::SceneExport::Renderer* _add = _internal_add_renderers();
  // @@protoc_insertion_point(field_add:SceneExport.Scene.renderers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SceneExport::Renderer >&
Scene::renderers() const {
  // @@protoc_insertion_point(field_list:SceneExport.Scene.renderers)
  return _impl_.renderers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SceneExport

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_2eproto
